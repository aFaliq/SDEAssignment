name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'ap-southeast-1'
      ECR_REPO: 'faliq/myrepo'
      IMAGE_TAG: '${{ github.sha }}'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
      if: ${{ matrix.language == 'java' }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
      if: ${{ matrix.language == 'python' }}

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
      if: ${{ matrix.language == 'node' }}

    - name: Build and Test
      run: |
        if [ -f "pom.xml" ]; then
          mvn clean package;
        elif [ -f "package.json" ]; then
          npm install;
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt && pytest;
        fi


    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        role-to-assume: arn:aws:iam::061039780090:role/workflowrunner
        aws-region: $AWS_REGION

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2  

    - name: Build Docker Image
      run: docker build -t $ECR_REPO:$IMAGE_TAG .

    - name: Push to ECR
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY}} 
        aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_KEY}}
        docker login --username AWS --password-stdin 061039780090.dkr.ecr.ap-southeast-1.amazonaws.com
        docker tag $ECR_REPO:$IMAGE_TAG 061039780090.dkr.ecr.ap-southeast-1.amazonaws.com$ECR_REPO:$IMAGE_TAG
        docker push 061039780090.dkr.ecr.ap-southeast-1.amazonaws.com$ECR_REPO:$IMAGE_TAG

    - name: Deploy to ECS
      run: |
        terraform init
        terraform plan